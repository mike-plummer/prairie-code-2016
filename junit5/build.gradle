buildscript {
	ext {
		springBootVersion = '1.4.1.RELEASE'
		junitPlatformVersion = '1.0.0-M2'
		junitJupiterVersion = '5.0.0-M2'
		junitVintageVersion = '4.12.0-M2'
        junitAntVersion = '1.8.2'
        jacocoVersion = '0.7.7.201606060606'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
		classpath "org.junit.platform:junit-platform-gradle-plugin:${junitPlatformVersion}"
	}
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'spring-boot'
apply plugin: 'jacoco'
apply plugin: 'org.junit.platform.gradle.plugin'

jar {
	baseName = 'junit5'
	version = '1.0.0'
}

configurations {
    junitXmlToHtml
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	mavenCentral()
}

junitPlatform {
    engines {
        // include 'junit-jupiter', 'junit-vintage'
        // exclude 'custom-engine'
    }
    tags {
        // include 'fast'
        // exclude 'slow'
    }
    // enableStandardTestTask true
    // includeClassNamePattern '.*Test'
    // reportsDir file('build/test-results/junit-platform')
}

dependencies {
	compile 'org.projectlombok:lombok'
	compile 'org.springframework.boot:spring-boot-starter'
	testCompile 'org.springframework.boot:spring-boot-starter-test'

	testCompile "org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}"
	testCompile "org.junit.platform:junit-platform-runner:${junitPlatformVersion}"

	// Spring extension for JUnit5
	testCompile fileTree(dir: 'libs', include: '*.jar')

	testRuntime "org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}"
	testRuntime "org.junit.vintage:junit-vintage-engine:${junitVintageVersion}"

    junitXmlToHtml "org.apache.ant:ant-junit:${junitAntVersion}"
}

// To run: gradle junitPlatformTest junitPlatformJacocoReport
project.afterEvaluate {
    def junitPlatformTestTask = project.tasks.getByName('junitPlatformTest')

    junitPlatformTestTask.doLast {
        convertJunitXmlToHtml(file('build/test-results/junit-platform'))
    }

    jacoco {
        toolVersion = "${jacocoVersion}"
        applyTo junitPlatformTestTask
    }

    // create junit platform jacoco task
    project.task(type: JacocoReport, "junitPlatformJacocoReport",
            {
                sourceDirectories = files("./src/main")
                classDirectories = files("$buildDir/classes/main")
                executionData junitPlatformTestTask

                reports {
                    xml.enabled false
                    csv.enabled false
                    html.enabled = true
                    html.destination "${buildDir}/jacocoHtml"
                }
            })
}

def convertJunitXmlToHtml(resultsDir) {
    def targetDir = new File(resultsDir, 'html')

    ant.taskdef(
            name: 'junitreport',
            classname: 'org.apache.tools.ant.taskdefs.optional.junit.XMLResultAggregator',
            classpath: configurations.junitXmlToHtml.asPath
    )

    ant.junitreport(todir: resultsDir) {
        fileset(dir: resultsDir, includes: 'TEST-*.xml')
        report(todir: targetDir, format: 'frames')
    }
}